from PIL import Image
from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from app.api.schemas import QRCodeParams, QRCodeRequest, QRCodeScaner
from app.api.utils import create_qr_code, process_logo, save_qr_code_image
from app.bot.create_bot import bot
from app.bot.keyboards.kbs import main_keyboard
from app.config import settings

router = APIRouter(prefix='/api', tags=['–ê–ü–ò'])


@router.post("/generate-qr/")
async def generate_qr(params: QRCodeParams):
    img = create_qr_code(params)

    if params.qr_logo:
        logo = await process_logo(params.qr_logo, params.qr_size)
        if logo:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ —Ü–µ–Ω—Ç—Ä QR-–∫–æ–¥–∞
            pos = ((params.qr_size - logo.size[0]) // 2, (params.qr_size - logo.size[1]) // 2)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
            combined = Image.new('RGBA', img.size, (0, 0, 0, 0))

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QR-–∫–æ–¥ –≤ RGBA, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if img.mode != 'RGBA':
                img = img.convert('RGBA')

            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º QR-–∫–æ–¥ –∏ –ª–æ–≥–æ—Ç–∏–ø
            combined.paste(img, (0, 0))
            combined.paste(logo, pos, logo)

            img = combined.convert('RGB')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL
    qr_code_url = await save_qr_code_image(img, params.user_id, settings.QR_CODES_DIR)

    return JSONResponse(content={"qr_code_url": qr_code_url})


@router.post("/send-qr/", response_class=JSONResponse)
async def send_qr_code(request: QRCodeRequest):
    try:
        caption = (
            "üéâ –í–∞—à QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            "üîç –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n"
            "üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º QR-–∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üëá"
        )
        await bot.send_photo(chat_id=request.user_id, photo=request.qr_code_url, caption=caption,
                             reply_markup=main_keyboard())
        return JSONResponse(content={"message": "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}, status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/send-scaner-info/", response_class=JSONResponse)
async def send_qr_code(request: QRCodeScaner):
    try:
        text = (
            f"üéâ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            f"<code><b>{request.result_scan}</b></code>\n\n"
            f"üîó –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π.\n"
            f"üìù –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üëá"
        )
        await bot.send_message(chat_id=request.user_id, text=text, reply_markup=main_keyboard())
        return JSONResponse(content={"message": "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω, –∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram"},
                            status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
